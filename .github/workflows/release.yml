name: "publish"

on:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      # Windows 환경에서 vcpkg를 사용해 OpenSSL 설치
      - name: Install vcpkg and OpenSSL (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg.exe install openssl:x64-windows

      # OpenSSL 환경 변수 설정
      - name: Set OpenSSL environment variables (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          echo "OPENSSL_DIR=${{ env.GITHUB_WORKSPACE }}/vcpkg/installed/x64-windows" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=${{ env.GITHUB_WORKSPACE }}/vcpkg/installed/x64-windows/include" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=${{ env.GITHUB_WORKSPACE }}/vcpkg/installed/x64-windows/lib" >> $GITHUB_ENV
          echo "SSL_CERT_FILE=${{ env.GITHUB_WORKSPACE }}/vcpkg/installed/x64-windows/certs/cacert.pem" >> $GITHUB_ENV

      # 인증서 다운로드
      - name: Download Root Certificates (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          New-Item -Path "${{ env.GITHUB_WORKSPACE }}/vcpkg/installed/x64-windows/certs" -ItemType Directory -Force
          curl -o ${{ env.GITHUB_WORKSPACE }}/vcpkg/installed/x64-windows/certs/cacert.pem https://curl.se/ca/cacert.pem

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: install frontend dependencies
        run: npm install

      # WASM 타겟 추가
      - name: Add wasm32 target
        run: rustup target add wasm32-unknown-unknown

      # Trunk 설치 (WASM 빌드를 위해 필요)
      - name: Install trunk
        run: cargo install trunk

      - name: Build project
        run: trunk build

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
