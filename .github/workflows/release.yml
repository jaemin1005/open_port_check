name: "publish"

on:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      # Windows에서는 Perl을 설치
      - name: Install Perl (Windows only)
        if: matrix.platform == 'windows-latest'
        run: choco install strawberryperl

      # Windows에서는 vcpkg와 OpenSSL 설치
      - name: Install vcpkg and OpenSSL (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg install openssl:x64-windows

      - name: Set OpenSSL environment variables (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          echo "OPENSSL_DIR=${{ github.workspace }}\vcpkg\installed\x64-windows" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=${{ github.workspace }}\vcpkg\installed\x64-windows\lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=${{ github.workspace }}\vcpkg\installed\x64-windows\include" >> $GITHUB_ENV
          echo "${{ github.workspace }}\vcpkg\installed\x64-windows\bin" >> $GITHUB_PATH

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install frontend dependencies
        run:
          npm install

      # Add wasm32 target for WASM builds
      - name: Add wasm32 target
        run: rustup target add wasm32-unknown-unknown

      - name: Install trunk
        run: cargo install trunk

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces __VERSION__ with the app version.
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
